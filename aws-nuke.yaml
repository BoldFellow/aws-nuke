name: AWS-Nuke Organization Cleanup

on:
  # Scheduled trigger
  schedule:
    - cron: '0 2 * * 6'  # Runs at 2 AM UTC every Saturday
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode'
        type: boolean
        default: true
      target_accounts:
        description: 'Comma-separated list of target account IDs (leave empty for all accounts)'
        type: string
        required: false
      excluded_accounts:
        description: 'Comma-separated list of account IDs to exclude'
        type: string
        required: false
        default: "772886489592,222222222222"  # Management account and production accounts

env:
  AWS_REGION: 'us-east-1'

jobs:
  fetch-accounts:
    name: Fetch Organization Accounts
    runs-on: ubuntu-latest
    outputs:
      target_accounts: ${{ steps.get-accounts.outputs.target_accounts }}
    
    steps:
      - name: Configure AWS credentials
        vuses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
          role-session-name: GitHubActionsAWSNuke
          role-duration-seconds: 3600
      
      - name: Get organization accounts
        id: get-accounts
        run: |
          # Get all accounts in the organization
          ACCOUNTS=$(aws organizations list-accounts --query "Accounts[?Status=='ACTIVE'].Id" --output text)
          
          # Handle manual exclusions if provided
          if [ -n "${{ github.event.inputs.excluded_accounts }}" ]; then
            EXCLUDED="${{ github.event.inputs.excluded_accounts }}"
            for ACCOUNT in $EXCLUDED; do
              ACCOUNTS=$(echo "$ACCOUNTS" | grep -v "$ACCOUNT")
            done
          else
            # Default exclusions from environment
            DEFAULT_EXCLUDED="772886489592 222222222222"  # Management account and production
            for ACCOUNT in $DEFAULT_EXCLUDED; do
              ACCOUNTS=$(echo "$ACCOUNTS" | grep -v "$ACCOUNT")
            done
          fi
          
          # Handle targeted accounts if provided
          if [ -n "${{ github.event.inputs.target_accounts }}" ]; then
            ACCOUNTS="${{ github.event.inputs.target_accounts }}"
          fi
          
          # Format the accounts for AWS-Nuke
          ACCOUNTS=$(echo "$ACCOUNTS" | tr ' ' ',')
          echo "target_accounts=$ACCOUNTS" >> $GITHUB_OUTPUT
          echo "Accounts to be processed: $ACCOUNTS"
  
  aws-nuke:
    name: Run AWS-Nuke
    runs-on: ubuntu-latest
    needs: fetch-accounts
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up environment variables
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "DRY_RUN=${{ github.event.inputs.dry_run }}" >> $GITHUB_ENV
          else
            echo "DRY_RUN=true" >> $GITHUB_ENV
          fi
          echo "TARGET_ACCOUNTS=${{ needs.fetch-accounts.outputs.target_accounts }}" >> $GITHUB_ENV
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsAWSNuke
      
      - name: Download AWS-Nuke
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/rebuy-de/aws-nuke/releases/latest | jq -r .tag_name)
          curl -sL "https://github.com/rebuy-de/aws-nuke/releases/download/${LATEST_VERSION}/aws-nuke-${LATEST_VERSION}-linux-amd64.tar.gz" | tar xz
          chmod +x ./aws-nuke-${LATEST_VERSION}-linux-amd64
          sudo mv ./aws-nuke-${LATEST_VERSION}-linux-amd64 /usr/local/bin/aws-nuke
      
      - name: Create AWS-Nuke config
        run: |
          cat > nuke-config.yaml <<EOL
          regions:
            - global
            - us-east-1
            - us-west-1
            - us-west-2
          
          account-blocklist:
            - "772886489592"  # Management account
            - "222222222222"  # Production account
          
          accounts:
            # This will apply to all accounts not explicitly defined
            # We're using a wildcard configuration
            "*":
              filters:
                IAMRole:
                  - "OrganizationAccountAccessRole"
                  - "AWSServiceRoleFor*"
                IAMRolePolicyAttachment:
                  - "role:OrganizationAccountAccessRole:*"
                IAMPolicy:
                  - "default"
          
          resource-types:
            targets:
              - EC2Instance
              - EC2Volume
              - EC2Snapshot
              - ECSCluster
              - ECSService
              - ECSTaskDefinition
              - RDSInstance
              - S3Bucket
              - S3Object
              - CloudFormationStack
              - DynamoDBTable
              - ElasticacheCluster
              - Lambda
            
            excludes:
              - IAMUser
              - IAMUserPolicyAttachment
              - IAMUserAccessKey
          EOL
      
      - name: Run AWS-Nuke
        run: |
          # Build the AWS-Nuke command
          CMD="aws-nuke --config nuke-config.yaml --no-prompt"
          
          # Add dry-run flag if needed
          if [ "${{ env.DRY_RUN }}" == "true" ]; then
            CMD="$CMD --dry-run"
          fi
          
          # Add target accounts if specified
          if [ -n "${{ env.TARGET_ACCOUNTS }}" ]; then
            CMD="$CMD --target-accounts ${{ env.TARGET_ACCOUNTS }}"
          fi
          
          echo "Running command: $CMD"
          $CMD
      
      # - name: Notify Slack on success
      #   if: success()
      #   uses: slackapi/slack-github-action@v1.24.0
      #   with:
      #     payload: |
      #       {
      #         "text": "AWS-Nuke completed successfully ✅",
      #         "blocks": [
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "*AWS-Nuke completed successfully* ✅"
      #             }
      #           },
      #           {
      #             "type": "section",
      #             "fields": [
      #               {
      #                 "type": "mrkdwn",
      #                 "text": "*Mode:*\n${{ env.DRY_RUN == 'true' && 'Dry Run' || 'Destructive' }}"
      #               },
      #               {
      #                 "type": "mrkdwn",
      #                 "text": "*Target Accounts:*\n${{ env.TARGET_ACCOUNTS }}"
      #               }
      #             ]
      #           },
      #           {
      #             "type": "actions",
      #             "elements": [
      #               {
      #                 "type": "button",
      #                 "text": {
      #                   "type": "plain_text",
      #                   "text": "View Run"
      #                 },
      #                 "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      #               }
      #             ]
      #           }
      #         ]
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      #     SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      
      # - name: Notify Slack on failure
      #   if: failure()
      #   uses: slackapi/slack-github-action@v1.24.0
      #   with:
      #     payload: |
      #       {
      #         "text": "AWS-Nuke failed ❌",
      #         "blocks": [
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "*AWS-Nuke execution failed* ❌"
      #             }
      #           },
      #           {
      #             "type": "section",
      #             "fields": [
      #               {
      #                 "type": "mrkdwn",
      #                 "text": "*Mode:*\n${{ env.DRY_RUN == 'true' && 'Dry Run' || 'Destructive' }}"
      #               },
      #               {
      #                 "type": "mrkdwn",
      #                 "text": "*Target Accounts:*\n${{ env.TARGET_ACCOUNTS }}"
      #               }
      #             ]
      #           },
      #           {
      #             "type": "actions",
      #             "elements": [
      #               {
      #                 "type": "button",
      #                 "text": {
      #                   "type": "plain_text",
      #                   "text": "View Logs"
      #                 },
      #                 "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      #               }
      #             ]
      #           }
      #         ]
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      #     SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK