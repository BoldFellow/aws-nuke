name: AWS Cloud-Nuke Organization Cleanup

# Add necessary permissions for OIDC authentication
permissions:
  id-token: write
  contents: read

on:
#   # Scheduled trigger
#   schedule:
#     - cron: '0 2 * * 6'  # Runs at 2 AM UTC every Saturday
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode'
        type: boolean
        default: true
      target_accounts:
        description: 'Comma-separated list of target account IDs (leave empty for all accounts)'
        type: string
        required: false
      excluded_accounts:
        description: 'Comma-separated list of account IDs to exclude'
        type: string
        required: false
        default: "772886489592"  # Management account
      older_than:
        description: 'Delete resources older than X days'
        type: string
        default: "0"
        required: false

env:
  AWS_REGION: 'us-east-1'
  CLOUD_NUKE_VERSION: 'v0.32.0'  # Update to the latest version as needed

jobs:
  test-auth:
    runs-on: ubuntu-latest
    outputs:
      target_accounts: ${{ steps.get-accounts.outputs.target_accounts }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
          role-session-name: GitHubActionsCloudNuke
    
      - name: Get organization accounts
        id: get-accounts
        run: |
          # Get all accounts in the organization
          echo "Fetching accounts from AWS Organizations..."
          ACCOUNTS=$(aws organizations list-accounts --query "Accounts[?Status=='ACTIVE'].Id" --output text || echo "")
          
          # Check if we got any accounts
          if [ -z "$ACCOUNTS" ]; then
            echo "Warning: No accounts returned from Organizations API. Are you running in the management account?"
            echo "No accounts found to process."
            echo "target_accounts=" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Found accounts: $ACCOUNTS"
          
          # Create an array from the space-separated account list
          ACCOUNTS_ARRAY=($ACCOUNTS)
          FILTERED_ACCOUNTS=()
          
          # Management account ID
          MGMT_ACCOUNT="772886489592"
          echo "Management account ID: $MGMT_ACCOUNT"
          
          # Add accounts to the filtered list, excluding management account
          for ACCOUNT in "${ACCOUNTS_ARRAY[@]}"; do
            if [ "$ACCOUNT" != "$MGMT_ACCOUNT" ]; then
              FILTERED_ACCOUNTS+=("$ACCOUNT")
            else
              echo "Excluding management account: $ACCOUNT"
            fi
          done
          
          # Handle manual exclusions if provided
          EXCLUDED="${{ github.event.inputs.excluded_accounts }}"
          if [ -n "$EXCLUDED" ]; then
            echo "Processing manual exclusions: $EXCLUDED"
            IFS=',' read -ra EXCLUDE_ARRAY <<< "$EXCLUDED"
            
            # Create a temporary array for the second filtering
            TEMP_ACCOUNTS=()
            
            for ACCOUNT in "${FILTERED_ACCOUNTS[@]}"; do
              EXCLUDE_THIS=false
              for EXCLUDE_ID in "${EXCLUDE_ARRAY[@]}"; do
                if [ "$ACCOUNT" = "$EXCLUDE_ID" ]; then
                  EXCLUDE_THIS=true
                  echo "Excluding manually specified account: $ACCOUNT"
                  break
                fi
              done
              
              if [ "$EXCLUDE_THIS" = false ]; then
                TEMP_ACCOUNTS+=("$ACCOUNT")
              fi
            done
            
            # Update the filtered accounts array
            FILTERED_ACCOUNTS=("${TEMP_ACCOUNTS[@]}")
          fi
          
          # Handle targeted accounts if provided
          TARGET_ACCOUNTS="${{ github.event.inputs.target_accounts }}"
          if [ -n "$TARGET_ACCOUNTS" ]; then
            echo "Using manually targeted accounts: $TARGET_ACCOUNTS"
            IFS=',' read -ra TARGET_ARRAY <<< "$TARGET_ACCOUNTS"
            
            # Replace filtered accounts with targeted accounts (excluding management)
            FILTERED_ACCOUNTS=()
            for TARGET_ID in "${TARGET_ARRAY[@]}"; do
              if [ "$TARGET_ID" != "$MGMT_ACCOUNT" ]; then
                FILTERED_ACCOUNTS+=("$TARGET_ID")
              else
                echo "Excluding management account from targets: $TARGET_ID"
              fi
            done
          fi
          
          # Convert array back to comma-separated string
          FINAL_ACCOUNTS=$(IFS=,; echo "${FILTERED_ACCOUNTS[*]}")
          
          echo "Final account list: ${FILTERED_ACCOUNTS[*]}"
          echo "Accounts to be processed: $FINAL_ACCOUNTS"
          echo "target_accounts=$FINAL_ACCOUNTS" >> $GITHUB_OUTPUT

  cloud-nuke:
    name: Run Cloud-Nuke
    runs-on: ubuntu-latest
    needs: test-auth
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up environment variables
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "DRY_RUN=${{ github.event.inputs.dry_run }}" >> $GITHUB_ENV
            echo "OLDER_THAN=${{ github.event.inputs.older_than }}" >> $GITHUB_ENV
          else
            echo "DRY_RUN=true" >> $GITHUB_ENV
            echo "OLDER_THAN=0" >> $GITHUB_ENV
          fi
          echo "TARGET_ACCOUNTS=${{ needs.test-auth.outputs.target_accounts }}" >> $GITHUB_ENV
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
          role-session-name: GitHubActionsCloudNuke
      
      - name: Download Cloud-Nuke
        run: |
          curl -sL "https://github.com/gruntwork-io/cloud-nuke/releases/download/${CLOUD_NUKE_VERSION}/cloud-nuke_linux_amd64" -o cloud-nuke
          chmod +x ./cloud-nuke
          sudo mv ./cloud-nuke /usr/local/bin/cloud-nuke
          cloud-nuke --version
      
      - name: Create Cloud-Nuke config
        run: |
          cat > cloud-nuke-config.yaml <<EOL
          regions:
            - "us-east-1"
          
          resource-types:
            # Compute Resources
            - EC2Instance  # EC2 instances
            - EBS          # Elastic Block Storage volumes
            - KeyPair      # EC2 key pairs
            - Snapshots    # EBS snapshots
            
            # Networking
            - NatGateway   # NAT Gateways - specifically included as requested
            - ELB          # Classic Load Balancers
            - ELBv2        # Application and Network Load Balancers
            - SecurityGroup # EC2 Security Groups
            - TransitGateway # Transit Gateways
            
            # Storage
            - S3           # S3 buckets and objects
            
            # Serverless and Functions
            - Lambda       # Lambda functions
            
            # Container Services
            - ECS          # Elastic Container Service
            - ECSService   # ECS Services
            - EKS          # Elastic Kubernetes Service
            
            # Databases
            - DynamoDB     # DynamoDB tables
            - RDS          # Relational Database Service instances
            
            # Application Services
            - SQS          # Simple Queue Service
            - APIGateway   # API Gateway
            
            # Deployment Resources
            - CloudformationStack  # CloudFormation stacks
            - LaunchConfiguration  # Auto Scaling launch configurations
            - LaunchTemplate       # EC2 launch templates
            
            # Management & Monitoring
            - CloudWatchDashboard  # CloudWatch dashboards
            - CloudWatchLogGroup   # CloudWatch log groups
            
            # Security & Identity
            - SecretsManager       # Secrets Manager secrets
            - KMS                  # Key Management Service keys
            - ACM                  # Certificate Manager certificates
            
            # Search Services
            - OpenSearchDomain     # OpenSearch domains

          exclude:
            IAMUsers:
              - "OrganizationAccountAccessRole"
              - "AWSServiceRoleFor*"
            EC2Instance:
              names:
                contains:
                  - "protected"
                  - "do-not-delete"
            SecurityGroup:
              names:
                contains:
                  - "default"
            CloudformationStack:
              names:
                contains:
                  - "StackSet-AWS-Landing-Zone"
                  - "aws-cloud-formation-stack-set"
            S3:
              names:
                contains:
                  - "cloudtrail"
                  - "config"
                  - "flowlog"
                  - "log-archive"
          EOL
          
          echo "Generated Cloud-Nuke config:"
          cat cloud-nuke-config.yaml
      
      # VPC preparation step removed as we're not deleting VPCs anymore
      
      - name: Run Cloud-Nuke
        run: |
          # Get the target accounts
          ACCOUNTS_TO_NUKE=$(echo "$TARGET_ACCOUNTS" | tr ',' ' ')
          
          if [ -z "$ACCOUNTS_TO_NUKE" ]; then
            echo "No accounts to process. Exiting."
            exit 0
          fi
          
          # Parse the older-than parameter
          OLDER_THAN_PARAM=""
          if [ "$OLDER_THAN" != "0" ]; then
            OLDER_THAN_PARAM="--older-than ${OLDER_THAN}d"
            echo "Will delete resources older than ${OLDER_THAN} days"
          fi
          
          # For each account, run Cloud-Nuke separately
          for ACCOUNT_ID in $ACCOUNTS_TO_NUKE; do
            if [ "$ACCOUNT_ID" != "772886489592" ]; then
              echo "Processing account: $ACCOUNT_ID"
              
              ROLE_ARN="arn:aws:iam::${ACCOUNT_ID}:role/OrganizationAccountAccessRole"
              
              # Build the command
              CMD="cloud-nuke aws --config cloud-nuke-config.yaml"
              
              # Add older-than parameter if specified
              if [ ! -z "$OLDER_THAN_PARAM" ]; then
                CMD="$CMD $OLDER_THAN_PARAM"
              fi
              
              # Add dry-run flag if needed
              if [ "$DRY_RUN" == "true" ]; then
                CMD="$CMD --dry-run"
              fi
              
              # Add remaining parameters
              CMD="$CMD --force --log-level info"
              
              # Set up AWS credentials for the target account
              temp_creds=$(aws sts assume-role \
                --role-arn "$ROLE_ARN" \
                --role-session-name "CloudNukeExecution" --output json)
              
              export AWS_ACCESS_KEY_ID=$(echo $temp_creds | jq -r .Credentials.AccessKeyId)
              export AWS_SECRET_ACCESS_KEY=$(echo $temp_creds | jq -r .Credentials.SecretAccessKey)
              export AWS_SESSION_TOKEN=$(echo $temp_creds | jq -r .Credentials.SessionToken)
              
              echo "Running command: $CMD"
              $CMD || echo "Failed for account $ACCOUNT_ID"
              
              # Unset the credentials
              unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
            else
              echo "Skipping management account $ACCOUNT_ID"
            fi
          done
      
      - name: Report Results
        if: always()
        run: |
          echo "Cloud-Nuke execution completed"
          if [ "$DRY_RUN" == "true" ]; then
            echo "Mode: Dry Run"
          else
            echo "Mode: Destructive"
          fi
          echo "Target Accounts: $TARGET_ACCOUNTS"
          echo "Resources older than: ${OLDER_THAN} days"