name: AWS-Nuke Organization Cleanup

# Add necessary permissions for OIDC authentication
permissions:
  id-token: write
  contents: read

on:
  # Scheduled trigger
  schedule:
    - cron: '0 2 * * 6'  # Runs at 2 AM UTC every Saturday
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode'
        type: boolean
        default: true
      target_accounts:
        description: 'Comma-separated list of target account IDs (leave empty for all accounts)'
        type: string
        required: false
      excluded_accounts:
        description: 'Comma-separated list of account IDs to exclude'
        type: string
        required: false
        default: "772886489592"  # Management account

env:
  AWS_REGION: 'us-east-1'

jobs:
  test-auth:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
          role-session-name: GitHubActionsAWSNuke
    
      - name: Get organization accounts
        id: get-accounts
        run: |
          # Get all accounts in the organization
          echo "Fetching accounts from AWS Organizations..."
          ACCOUNTS=$(aws organizations list-accounts --query "Accounts[?Status=='ACTIVE'].Id" --output text || echo "")
          
          # Check if we got any accounts
          if [ -z "$ACCOUNTS" ]; then
            echo "Warning: No accounts returned from Organizations API. Are you running in the management account?"
            echo "target_accounts=" >> $GITHUB_OUTPUT
            echo "No accounts found to process."
            exit 0
          fi
          
          echo "Found accounts: $ACCOUNTS"
          
          # Handle manual exclusions if provided
          EXCLUDED="${{ github.event.inputs.excluded_accounts }}"
          if [ -n "$EXCLUDED" ]; then
            echo "Excluding manually specified accounts: $EXCLUDED"
            for ACCOUNT in $(echo $EXCLUDED | tr ',' ' '); do
              ACCOUNTS=$(echo "$ACCOUNTS" | grep -v "$ACCOUNT" || echo "$ACCOUNTS")
            done
          fi
          
          # Always exclude the management account
          MGMT_ACCOUNT="772886489592"
          echo "Excluding management account: $MGMT_ACCOUNT"
          ACCOUNTS=$(echo "$ACCOUNTS" | grep -v "$MGMT_ACCOUNT" || echo "$ACCOUNTS")
          
          # Handle targeted accounts if provided
          TARGET_ACCOUNTS="${{ github.event.inputs.target_accounts }}"
          if [ -n "$TARGET_ACCOUNTS" ]; then
            echo "Using manually targeted accounts: $TARGET_ACCOUNTS"
            ACCOUNTS="$TARGET_ACCOUNTS"
          fi
          
          # Format the accounts for AWS-Nuke
          ACCOUNTS=$(echo "$ACCOUNTS" | tr ' ' ',' | tr -d '\n')
          echo "Final account list: $ACCOUNTS"
          echo "target_accounts=$ACCOUNTS" >> $GITHUB_OUTPUT
          echo "Accounts to be processed: $ACCOUNTS"
  # aws-nuke:
  #   name: Run AWS-Nuke
  #   runs-on: ubuntu-latest
  #   needs: fetch-accounts
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
      
  #     - name: Set up environment variables
  #       run: |
  #         if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
  #           echo "DRY_RUN=${{ github.event.inputs.dry_run }}" >> $GITHUB_ENV
  #         else
  #           echo "DRY_RUN=true" >> $GITHUB_ENV
  #         fi
  #         echo "TARGET_ACCOUNTS=${{ needs.fetch-accounts.outputs.target_accounts }}" >> $GITHUB_ENV
  #         export TARGET_ACCOUNTS=${{ needs.fetch-accounts.outputs.target_accounts }}
      
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v3
  #       with:
  #         role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
  #         aws-region: us-east-1
  #         role-session-name: GitHubActionsAWSNuke
      
  #     - name: Download AWS-Nuke
  #       run: |
  #         LATEST_VERSION=$(curl -s https://api.github.com/repos/rebuy-de/aws-nuke/releases/latest | jq -r .tag_name)
  #         curl -sL "https://github.com/rebuy-de/aws-nuke/releases/download/${LATEST_VERSION}/aws-nuke-${LATEST_VERSION}-linux-amd64.tar.gz" | tar xz
  #         chmod +x ./aws-nuke-${LATEST_VERSION}-linux-amd64
  #         sudo mv ./aws-nuke-${LATEST_VERSION}-linux-amd64 /usr/local/bin/aws-nuke
      
  #     - name: Create AWS-Nuke config
  #       run: |
  #         cat > nuke-config.yaml <<EOL
  #         regions:
  #           - global
  #           - us-east-1
  #           - us-east-2
  #           - us-west-1
  #           - us-west-2
  #           - eu-west-1
  #           - eu-central-1
  #           - ap-southeast-1
  #           - ap-southeast-2
  #           - ap-northeast-1
  #           - sa-east-1
          
  #         account-blocklist:
  #           - "772886489592"  # Management account
          
  #         accounts:
  #           # This will apply to all accounts not explicitly defined
  #           # We're using a wildcard configuration
  #           "*":
  #             filters:
  #               IAMRole:
  #                 - "OrganizationAccountAccessRole"
  #                 - "AWSServiceRoleFor*"
  #               IAMRolePolicyAttachment:
  #                 - "role:OrganizationAccountAccessRole:*"
  #               IAMPolicy:
  #                 - "default"
  #               CloudFormationStack:
  #                 - "StackSet-AWS-Landing-Zone*"
          
  #         resource-types:
  #           targets:
  #             - EC2Instance
  #             - EC2Volume
  #             - EC2Snapshot
  #             - ECSCluster
  #             - ECSService
  #             - ECSTaskDefinition
  #             - RDSInstance
  #             - S3Bucket
  #             - S3Object
  #             - CloudFormationStack
  #             - DynamoDBTable
  #             - ElasticacheCluster
  #             - Lambda
  #             - IAMPolicy
  #             - IAMGroup
  #             - IAMGroupPolicy
  #             - IAMGroupPolicyAttachment
  #             - AutoScalingGroup
  #             - LaunchConfiguration
  #             - LaunchTemplate
  #             - EBSVolume
  #             - ElasticBeanstalkApplication
  #             - ElasticBeanstalkEnvironment
  #             - ElasticLoadBalancer
  #             - ElasticLoadBalancingV2LoadBalancer
  #             - ElasticLoadBalancingV2TargetGroup
  #             - SQSQueue
  #             - SNSTopic
  #             - CloudWatchAlarm
  #             - KMSKey
  #             - KMSAlias
            
  #           excludes:
  #             - IAMUser
  #             - IAMUserPolicyAttachment
  #             - IAMUserAccessKey
  #             - IAMRole
  #             - IAMRolePolicyAttachment
  #         EOL
      
  #     - name: Run AWS-Nuke
  #       run: |
  #         # Build the AWS-Nuke command
  #         CMD="aws-nuke --config nuke-config.yaml --no-prompt"
          
  #         # Add dry-run flag if needed
  #         if [ "$DRY_RUN" == "true" ]; then
  #           CMD="$CMD --dry-run"
  #         fi
          
  #         # Add target accounts if specified
  #         if [ -n "$TARGET_ACCOUNTS" ]; then
  #           CMD="$CMD --target-accounts $TARGET_ACCOUNTS"
  #         fi
          
  #         echo "Running command: $CMD"
  #         $CMD
      
  #     - name: Report Results
  #       if: always()
  #       run: |
  #         echo "AWS-Nuke execution completed"
  #         if [ "$DRY_RUN" == "true" ]; then
  #           echo "Mode: Dry Run"
  #         else
  #           echo "Mode: Destructive"
  #         echo "Target Accounts: $TARGET_ACCOUNTS"
  #         echo "Target Accounts: $TARGET_ACCOUNTS"